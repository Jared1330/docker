Отличие docker от VM:
VM - Среда, которая обеспечивает интерфейс взаимодействия между пользовательскими приложениями и методами ядра. Виртуальная машина изолируется полностью средствами процессора. 
Docker - Изолированная программная среда, эмулирующая аппаратное обеспечение некоторой платформы. Работает на ядре хостовой операционной системы и использует для изоляции возможности не железа, а операционной системы, так называемое пространство имён

sudo systemctl status docker
docker stats # top for docker

====== Images ======
docker images # check images
docker build -t test .  --no-cache # created image from Dockerfile not using cashe
docker rmi # remove image
docker rmi -f $(docker images -q)    # remove all images


====== Containers ======
docker ps # check all containers
docker ps -a  # check running containers
docker run -it -p 8888:8080 nginx:latest # -p (перенаправление портов, где я хочу:куда по факту приходит) -it (интерактиво)
docker run -d -p 8888:80 nginx:latest # -d (Detached mode - run container in the background, print new container id)
docker logs # check logs 
docker exec -it 5267e21d140 /bin/bash  # login to container
docker rm  # remove contaier 
docker rm -f $(docker ps -aq)        # remove all container


===== Volume ===== 
docker volume ls
docker volume create test
docker run -d -p 10000:80 -v test:/data nginx:latest
docker volume inspect test
docker volume rm test
docker volume prune # remove all unused volumes

===== Network =====
Типы:
bridge - изолированная сеть между контейнерами (сеть по умолчанию)
host - удаление изоляции контейнера, работа на прямую с хостовой машиной
overlay - позволяет соединять контейнеры на разных хост машинах (используется при построение кластера Docker swarm / Kuber)
macvlan - уникальный mac адрес для контейнера в этом типе сети хост Docker принимает запросы на несколько MAC-адресов по одному IP-адресу и направляет эти запросы в соответствующий контейнер
null - без сети

docker network ls
docker network create -d bridge network-name # create network with name network-name
docker network rm network-name   # remove network with name network-name
docker run [OPTIONS] --network=network-name [CONTAINER_ID] # run container in network
docker network connect network-name [CONTAINER_ID] # add container to network
docker network disconnect network-name [CONTAINER_ID] # remove container to network
docker network inspect network-name # check network details

===== Docker Compose ====
docker-compose up -d
docker-compose ps
docker-compose logs [IMAGE_NAME]
docker-compose down

====== DIND ======
docker run --privileged -d --name dind-test docker:dind
